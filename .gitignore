Nesse exato momento nós temos uma configuração básica de terraform que cria uma VM Ubuntu no Google Cloud.

A ideia é que nossa configuração cresça, mas antes de prosseguirmos é extremamente importante criarmos um repositório no GitHub para armazenar e versionar nosso código. 

---

###1.

Primeira coisa que precisamos fazer é entrar na pasta que contém nosso código terraform e executar um "git init" para tranformar a pasta em um repositório GIT.

`$  git init`

```
Initialized empty Git repository in /vagrant/terraform-essentials-mbaimpacta/.git/

```
---

###2. 

Depois vamos criar um repositório no GitHub com o mesmo nome da nossa pasta: **terraform-essentials-mbaimpacta**

Aqui é importante observar que nosso repositório não será iniciado ao criar pois já temos a pasta criada em nosso desktop. Veja que eu não selecionei nenhuma opção de Inicialização do Repo.

![](https://trello-attachments.s3.amazonaws.com/5f824a9935f85e239c78247a/5f88e338f7c677309d5ec151/320f36967b690b1fe23659c1af38b47b/image.png)


Quando criamos dessa maneira ele nos apresenta algumas opções e no nosso caso nos encaixamos na segunda opção: **"or push an existing repository from the command line"**

![](https://trello-attachments.s3.amazonaws.com/5f824a9935f85e239c78247a/5f88e338f7c677309d5ec151/06997479acf6e5a21fd573a3fe342c70/image.png)

###3.
Vamos entrar na nossa pasta e adicionar nosso repositório remoto do GitHub:

`$ git remote add origin git@github.com:gabydias/terraform-essentials-mbaimpacta.git`

Aqui é importante lembrar que se quisermos enviar Commits para o GitHub e considerando que estamos usando um "Desktop" novo que é a máquina Workspace criada pelo Vagrant, teremos que fazer o procedimento de casdastrar a chave SSH.

`$ cat ~vagrant/.ssh/id_rsa.pub` 


![](https://trello-attachments.s3.amazonaws.com/5f824a9935f85e239c78247a/5f88e338f7c677309d5ec151/42284b73cffd0702c79a40907d3b0372/image.png)

---

###4. 
Precisamos também configurar um arquivo chamado **.gitignore** para que seja possível  garantir que alguns arquivos não sejam enviados para o GitHub porque não se faz necessário enviar, como por exemplo o arquivo de estado, o diretório .terraform, etc. 

O próprio GitHub sugeri um modelo de arquivo para repositórios terraform, iremos usá-lo. 

`$ git status`

`$ vim .gitignore` 

 ```
# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log

# Ignore any .tfvars files that are generated automatically for each Terraform run. Most
# .tfvars files are managed as part of configuration and so should be included in
# version control.
#
# example.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

```

Veja que bastou criar o arquivo .gitignore que ele já não trás mais no git status os arquivos que queremos ignorar.

`$ git status`

![](https://trello-attachments.s3.amazonaws.com/5f824a9935f85e239c78247a/5f88e338f7c677309d5ec151/ebb04ca163c77fd1e7d50610b2fee9de/image.png)

---

###5.
Agora podemos podemos seguir os passos para enviar nosso código para o GiHub através do Commit e Push.

`$ git config --global user.email "gabydias@gmail.com"`

`$ git config --global user.name "Gaby Dias"`

`$ git add --all`

`$ git commit -m "Commit Inicial"`

`$ git push origin master`

`$ git branch`

